---
swagger: "2.0"
info:
  description: From the todo list tutorial on goswagger.io
  title: A Todo list application
  version: 1.0.0
consumes:
- application/io.goswagger.examples.todo-list.v1+json
produces:
- application/io.goswagger.examples.todo-list.v1+json
schemes:
- http
- https
paths:
  /todos:
    get:
      tags:
      - todos
      operationId: findTodos
      parameters:
      - name: since
        in: query
        type: integer
        format: int64
      - name: limit
        in: query
        type: integer
        format: int32
        default: 20
      responses:
        200:
          description: list the todo operations
          schema:
            type: array
            items:
              $ref: "#/definitions/item"
        default:
          description: generic error response
          schema:
            $ref: "#/definitions/error"
    post:
      tags:
      - todos
      operationId: addTodo
      parameters:
      - name: body
        in: body
        schema:
          $ref: "#/definitions/item"
      responses:
        201:
          description: Created
          schema:
            $ref: "#/definitions/item"
        default:
          description: error
          schema:
            $ref: "#/definitions/error"
  /todos/{id}:
    parameters:
    - type: integer
      format: int64
      name: id
      in: path
      required: true
    get:
      tags:
      - todos
      operationId: getTodo
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/item'
        default:
          description: error
          schema:
            $ref: '#/definitions/error'
    put:
      tags:
      - todos
      operationId: updateTodo
      parameters:
      - name: body
        in: body
        schema:
          $ref: "#/definitions/item"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/item"
        default:
          description: error
          schema:
            $ref: "#/definitions/error"
    delete:
      tags:
      - todos
      operationId: deleteTodo
      responses:
        204:
          description: Deleted
        default:
          description: error
          schema:
            $ref: "#/definitions/error"
  /consumers/{id}:
    parameters:
    - type: integer
      format: int64
      name: id
      in: path
      required: true
    get:
      tags:
      - consumers
      operationId: findConsumer
      parameters:
      - name: since
        in: query
        type: integer
        format: int64
      - name: limit
        in: query
        type: integer
        format: int32
        default: 20
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/consumer'
        default:
          description: generic error response
          schema:
            $ref: "#/definitions/error"
securityDefinitions:
  basicAuth:
    type: "basic"
    description: "Consumer key and id pairs"
definitions:
  item:
    type: object
    required:
    - description
    properties:
      id:
        type: integer
        format: int64
        readOnly: true
      description:
        type: string
        minLength: 1
      completed:
        type: boolean
  error:
    type: object
    properties:
      statusCode:
        type: integer
        format: int
      statusText:
        type: string
      code:
        type: integer
        format: int
      message:
        type: string
  consumer:
    type: object
    required:
    - key
    properties:
      id:
        type: integer
        format: int64
        readOnly: true
      key:
        type: string
      